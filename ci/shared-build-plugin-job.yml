# Template for create packages stage

parameters:
# buildType: Options: Development or Production 
# Development: Build and test stage will use submodule references for 
# dependencies where the dependency is relative to the local file system
# Production: Build and test stage will use the publically released packages.
# imageName: agent to run the stage on
- name: buildType
- name: imageName
    
jobs:
- job: Build_Plugin
  displayName: Build Plugin
  dependsOn: Versioning
  condition: and(succeeded(), ne(variables['CreatePackages'], 'Off'))
  
  variables:
    GitVersionSemVer: $[ dependencies.Versioning.outputs['SetGitVersionVars.GitVersionSemVer'] ]
  
  pool:
    vmImage: ${{ parameters.imageName }}

  steps:

  # The lines below are needed to allow the pipeline access to the
  # OAuth access token that controls write access to the git repository. 
  # (Required for GitTag task)
  - checkout: self
    lfs: true
    submodules: recursive
    persistCredentials: true

  - script: |
      sudo apt-get update
      sudo apt -y install software-properties-common
      sudo add-apt-repository ppa:ondrej/php
      sudo apt-get update
      sudo apt -y install php7.4

      sudo update-alternatives --set php /usr/bin/php7.4
      php -version
      if [ $? -ne 0 ]; then
        echo "Failed to install PHP."
        exit 1
      fi        
    displayName: 'Install PHP 7.4'
    
  # Install Pipeline Dependencies based on the buildType parameter. 
  - script: |
      cd lib
      echo "Build Type ${{ parameters.buildType }}."
      if [ "${{ parameters.buildType }}" = "Development" ]; then
        echo "Test Development Pipeline."
        cd pipeline-php-cloudrequestengine
        mv composer-dev.json composer.json
        if [ $? -ne 0 ]; then
          echo "Failed to update composer.json with development version for submodule pipeline-php-cloudrequestengine."
          exit 1
        fi
        cd ..         
        mv composer-dev.json composer.json
        if [ $? -ne 0 ]; then
          echo "Failed to update composer.json with development version."
          exit 1
        fi
      else
        echo "Test Production Pipeline."
      fi
      composer install
    displayName: 'Build Dependent Libraries'

  - script: |
      echo "Updating Plugin Version to $(GitVersionSemVer)."
      sed -i 's,.*Stable tag: .*$,Stable tag: $(GitVersionSemVer),' readme.txt
      if [ $? -ne 0 ]; then
        echo "Failed to update Stable Tag in readme.txt."
        exit 1
      fi
      sed -i 's,.*Version: .*$,    Version:     $(GitVersionSemVer),' fiftyonedegrees.php
      if [ $? -ne 0 ]; then
        echo "Failed to update Plugin Version in main plugin (fiftyonedegrees) file."
        exit 1
      fi
      echo "# Git commit"
      git config user.email "ciuser@51degrees.com"
      git config user.name "CIUser"
      git add fiftyonedegrees.php
      git add readme.txt
      git commit -m "Updated Wordpress Plugin Version $(GitVersionSemVer)."
      if [ $? -ne 0 ]; then
        echo "Failed to commit Updated Version in Git Repository."
        exit 1
      fi   
    displayName: 'Set and Commit Plugin Version'
    
  - script: |
      mkdir package
      mkdir package/lib      
      cp -r assets/ package/
      cp -r includes/ package/
      cp -r lib/vendor package/lib/
      cp -r lib/composer.json package/lib/
      cp -r conditional-group-block package/
      cp *.php package/
      cp *.txt package/
      cp LICENSE package/
      cd package               
      ls -lhtr      
    displayName: 'Copy and List Package Files'
    
  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: '$(Build.SourcesDirectory)/package'
      includeRootFolder: false
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/pipeline-plugin.zip'
      replaceExistingArchive: true
    displayName: 'Build Plugin'

  - script: |
      cd $(Build.ArtifactStagingDirectory)        
      ls -lhtr
      if [ $? -ne 0 ]; then
        echo "Failed to get Wordpress Plugin artifacts."
        exit 1
      fi        
    displayName: 'List Staging artifacts'
    
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      preferBundledVersion: True
    displayName: 'Publish Plugin Artifacts'
    condition: succeeded()